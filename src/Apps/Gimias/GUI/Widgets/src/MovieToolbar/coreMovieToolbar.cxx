/*
* Copyright (c) 2009,
* Computational Image and Simulation Technologies in Biomedicine (CISTIB),
* Universitat Pompeu Fabra (UPF), Barcelona, Spain. All rights reserved.
* See license.txt file for details.
*/

// -*- C++ -*- generated by wxGlade 0.6.3 on Tue Oct 21 12:30:12 2008

#include "coreMovieToolbar.h"
#include "coreSettings.h"
#include "coreKernel.h"
#include <wx/bmpbuttn.h>
#include <wx/slider.h>
#include "wxID.h"
#include "coreMultiRenderWindow.h"
#include "Movie.xpm"
#include "coreDataEntityListBrowser.h"

#define wxID_MovieToolbarTimer	wxID("MovieToolbarTimer")


using namespace Core::Widgets;


BEGIN_EVENT_TABLE(MovieToolbar, MovieToolbarUI)
	EVT_TIMER		(wxID_MovieToolbarTimer, MovieToolbar::OnTimer)
END_EVENT_TABLE();


MovieToolbar::MovieToolbar(wxWindow* parent, int id, const wxPoint& pos, const wxSize& size, long style):
MovieToolbarUI(parent, id, pos, size, wxTAB_TRAVERSAL)
{
	SetBitmap( movie_xpm );

	SetMinSize( wxSize( 310, 50 ) );

	m_FrameRate = frameRateSlider->GetValue();

	m_Timer = new wxTimer(this, wxID_MovieToolbarTimer);
	m_MovieMode = STOPPED;
	m_CurrentTimeStep = Core::IntHolderType::New();
	m_CurrentTimeStep->SetSubject( 0 );
	m_CurrentTimeStep->SetName( "CurrentTimeStep" );
	m_CurrentTimeStep->AddObserver( 
		this, 
		&Self::OnModifiedTimeStepHolder );
}


/**
*/
wxSlider* Core::Widgets::MovieToolbar::GetSlider()
{
	return movieSlider;
}


/**
*/
Core::Widgets::MovieToolbar::~MovieToolbar()
{
	delete m_Timer;
}


/**
*/
Core::IntHolderType::Pointer Core::Widgets::MovieToolbar::GetCurrentTimeStep()
{
	return m_CurrentTimeStep;
}

/**
*/
void MovieToolbar::OnMovieSlider(wxScrollEvent &event)
{
	m_CurrentTimeStep->SetSubject( movieSlider->GetValue() );
}	


/**
*/
void MovieToolbar::OnPlayButton(wxCommandEvent &event)
{
	if( m_MovieMode != MovieToolbar::PLAYING )
	{
		m_MovieMode = MovieToolbar::PLAYING;
		m_Timer->Start(m_FrameRate, wxTIMER_CONTINUOUS); // milli seconds
		UpdateWidget();
	}
}


/**
*/
void MovieToolbar::OnStopButton(wxCommandEvent &event)
{
	Stop();
}


/**
*/
void MovieToolbar::OnPauseButton(wxCommandEvent &event)
{
	switch (m_MovieMode)
	{
	case STOPPED:
		break;
	case MovieToolbar::PLAYING :
		m_Timer->Stop();
		m_MovieMode = MovieToolbar::PAUSE;
		break;
	case MovieToolbar::PAUSE :
		m_Timer->Start(m_FrameRate); // milli seconds
		m_MovieMode = MovieToolbar::PLAYING;
		break;
	}
}


/**
*/
void MovieToolbar::OnFrameRateSlider(wxScrollEvent &event)
{
	m_FrameRate = frameRateSlider->GetValue();
	
	// Restart the timer, using the new value 
	m_Timer->Stop();
	m_Timer->Start(m_FrameRate);
}


/**
*/
void MovieToolbar::OnTimer( wxTimerEvent& event )
{
	if ( !GetMultiRenderWindow( ) )
	{
		return;
	}

	int min = 0;
	int max = 0;
	GetMultiRenderWindow( )->GetTimeRange( min, max );
	int time = GetMultiRenderWindow( )->GetTime();
	if ( time < max - 1 )
		time = time + 1;
	else
		time = min;

	m_CurrentTimeStep->SetSubject( time );
}


/**
*/
void MovieToolbar::Stop()
{
	m_MovieMode = MovieToolbar::STOPPED;
	m_Timer->Stop();
	m_CurrentTimeStep->SetSubject( 0 );
	UpdateWidget();
}


/**
*/
void MovieToolbar::OnRenderingTreeChanged()
{
	if ( GetMultiRenderWindow() == NULL )
	{
		return;
	}

	int min = 0;
	int max = 0;
	GetMultiRenderWindow( )->GetTimeRange( min, max );

	// Check if the range has been changed.
	if ( movieSlider->GetMin( ) != min || movieSlider->GetMax( ) != max )
	{
		movieSlider->SetRange( min, max - 1 );
	}

	m_CurrentTimeStep->SetSubject( GetMultiRenderWindow()->GetTime() );

	UpdateWidget();
}

void Core::Widgets::MovieToolbar::OnModifiedTimeStepHolder()
{
	if ( GetMultiRenderWindow() )
	{
		GetMultiRenderWindow()->SetTime( m_CurrentTimeStep->GetSubject( ) );

		UpdateWidget();
	}
}

/**
*/
void Core::Widgets::MovieToolbar::UpdateWidget()
{
	int time = 0;
	if ( GetMultiRenderWindow() != NULL )
	{
		int min = 0;
		int max = 0;
		GetMultiRenderWindow( )->GetTimeRange( min, max );
		time = GetMultiRenderWindow( )->GetTime();

		wxString frameNr;
		if ( max - min == 0 )
			frameNr = wxString::Format( wxT("%i" "/" "%i"), time+1, max - min + 1);
		else
			frameNr = wxString::Format( wxT("%i" "/" "%i"), time+1, max - min );

		text_ctrl_FrameNr->SetValue(frameNr);
	}
	else
	{
		text_ctrl_FrameNr->Clear();
		movieSlider->SetRange(0,0);
	}

	movieSlider->SetValue( time );
}

void Core::Widgets::MovieToolbar::SetRenderingTree( RenderingTree::Pointer tree )
{
	if ( GetRenderingTree() )
	{
		GetRenderingTree( )->RemoveObserverOnModified( 
			this, &MovieToolbar::OnRenderingTreeChanged );
	}

	BaseWindow::SetRenderingTree( tree );

	if ( GetRenderingTree() )
	{
		GetRenderingTree( )->AddObserverOnModified( 
			this, &MovieToolbar::OnRenderingTreeChanged );
	}

	OnRenderingTreeChanged( );
}

