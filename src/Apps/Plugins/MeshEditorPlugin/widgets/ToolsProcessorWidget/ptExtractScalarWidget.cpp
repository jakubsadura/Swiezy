// Copyright 2009 Pompeu Fabra University (Computational Imaging Laboratory), Barcelona, Spain. Web: www.cilab.upf.edu.
// This software is distributed WITHOUT ANY WARRANTY; 
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// -*- C++ -*- generated by wxGlade 0.6.3 on Thu Jan 14 17:39:16 2010

#include "ptExtractScalarWidget.h"
#include "coreLandmarkSelectorWidget.h"
#include "corePointInteractorPointSelect.h"

// begin wxGlade: ::extracode

// end wxGlade


ptExtractScalarWidget::ptExtractScalarWidget(
	wxWindow* parent, int id, const wxPoint& pos, const wxSize& size, long style):
    wxPanel(parent, id, pos, size, wxTAB_TRAVERSAL)
{
    // begin wxGlade: ptExtractScalarWidget::ptExtractScalarWidget
    m_btnEnable = new wxToggleButton(this, wx_IDptExtractScalarWidgetBtnEnable, wxT("Enable"));
	label_1 = new wxStaticText(this, wxID_ANY, wxT("Scalar name"));
	m_txtScalarName = new wxTextCtrl(this, wx_IDExtractScalarTxtScalarName, wxEmptyString);

	m_Processor = Core::ExtractScalarProcessor::New( );

	m_Processor->GetInputDataEntityHolder( 0 )->AddObserver( 
		this, 
		&ptExtractScalarWidget::OnSelectedInput );

	m_Processor->GetInputDataEntityHolder( 1 )->AddObserver( 
		this, 
		&ptExtractScalarWidget::OnSelectedPoint );

    set_properties();
    do_layout();
    // end wxGlade
}

ptExtractScalarWidget::~ptExtractScalarWidget()
{
}

BEGIN_EVENT_TABLE(ptExtractScalarWidget, wxPanel)
    // begin wxGlade: ptExtractScalarWidget::event_table
	EVT_TEXT(wx_IDExtractScalarTxtScalarName, ptExtractScalarWidget::OnEnterText)
	EVT_TOGGLEBUTTON(wx_IDptExtractScalarWidgetBtnEnable, ptExtractScalarWidget::OnButtonEnable)
    // end wxGlade
END_EVENT_TABLE();


void ptExtractScalarWidget::OnButtonEnable(wxCommandEvent &event)
{
	if ( m_btnEnable->GetValue() && m_Processor->GetInputDataEntity(0).IsNotNull() )
	{
		ConnectInteractor();
	}
	else
	{
		DisconnectInteractor();	
	}
}


// wxGlade: add ptExtractScalarWidget event handlers


void ptExtractScalarWidget::set_properties()
{
    // begin wxGlade: ptExtractScalarWidget::set_properties
    // end wxGlade
}


void ptExtractScalarWidget::do_layout()
{
	// begin wxGlade: ptExtractScalarWidget::do_layout
	wxBoxSizer* GlobalSizer = new wxBoxSizer(wxVERTICAL);
	wxBoxSizer* sizer_1 = new wxBoxSizer(wxHORIZONTAL);
	sizer_1->Add(label_1, 1, 0, 0);
	sizer_1->Add(m_txtScalarName, 0, 0, 0);
	GlobalSizer->Add(sizer_1, 0, wxEXPAND, 0);
	GlobalSizer->Add(m_btnEnable, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
	SetSizer(GlobalSizer);
	GlobalSizer->Fit(this);
	// end wxGlade
}

Core::BaseProcessor::Pointer ptExtractScalarWidget::GetProcessor()
{
	return m_Processor.GetPointer();
}


bool ptExtractScalarWidget::Enable( bool enable /*= true */ )
{
	bool bReturn = wxPanel::Enable( enable );

	try
	{
		const std::string helpStr = \
			"Extract Scalar tool: extract scalar values." \
			"\n\nUsage: SHIFT + left button click to select a point where" \
			"\nthe scalar will be extracted.";
		SetInfoUserHelperWidget( helpStr );


		Core::Widgets::LandmarkSelectorWidget* widget;
		widget = GetSelectionToolWidget< Core::Widgets::LandmarkSelectorWidget>( "Landmark selector" );
		if ( widget == NULL )
		{
			return bReturn;
		}

		if ( m_btnEnable->GetValue( ) && m_Processor->GetInputDataEntity(0).IsNotNull() )
		{
			ConnectInteractor();
		}
		else
		{
			DisconnectInteractor();
		}
	}
	coreCatchExceptionsReportAndNoThrowMacro("ptExtractScalarWidget::Enable");

	return bReturn;
}

void ptExtractScalarWidget::OnSelectedPoint()
{
	try
	{
		if ( m_btnEnable->GetValue( ) )
		{
			m_Processor->Update();	
		}
	}
	coreCatchExceptionsLogAndNoThrowMacro(
		ptExtractScalarWidget::OnSelectedPoint)
}

void ptExtractScalarWidget::OnSelectedInput()
{
	try
	{
	}
	coreCatchExceptionsLogAndNoThrowMacro(
		ptExtractScalarWidget::OnSelectedInput)
}

void ptExtractScalarWidget::ConnectInteractor()
{
	Core::Widgets::LandmarkSelectorWidget* widget;
	widget = GetSelectionToolWidget< Core::Widgets::LandmarkSelectorWidget>( "Landmark selector" );
	if((widget->GetInputDataEntity())!= (m_Processor->GetInputDataEntity(0)))
	{
		this->DisconnectInteractor();	
	}

	// Connect interactor
	widget->SetAllowedInputDataTypes( 
		m_Processor->GetInputPort( 0 )->GetDataEntityType() );

	widget->SetInteractorType(Core::PointInteractor::POINT_SELECT);
	widget->StartInteractor();

	Core::PointInteractorPointSelect* pointSelectInteractor;
	pointSelectInteractor = static_cast<Core::PointInteractorPointSelect*> (
		widget->GetPointInteractor( ).GetPointer( ));

	m_Processor->SetInputDataEntity( 1, 
		pointSelectInteractor->GetSelectedPointsDataEntity() );

	m_btnEnable->SetLabel( "Disable" );
}

void ptExtractScalarWidget::DisconnectInteractor()
{
	Core::Widgets::LandmarkSelectorWidget* widget;
	widget = GetSelectionToolWidget< Core::Widgets::LandmarkSelectorWidget>( "Landmark selector" );

	// Disconnect interactor
	widget->StopInteraction();

	widget->SetDefaultAllowedInputDataTypes( );

	m_btnEnable->SetLabel( "Enable" );
}

void ptExtractScalarWidget::OnInit()
{
	GetProcessorOutputObserver(0)->SetHideInput(false);
	GetProcessorOutputObserver(0)->SelectDataEntity(false);
	UpdateWidget( );
}

void ptExtractScalarWidget::UpdateWidget()
{
	m_txtScalarName->SetValue( wxString::Format( "%s", m_Processor->GetScalarName().c_str() ) );
}

void ptExtractScalarWidget::UpdateData()
{
	m_Processor->SetScalarName( m_txtScalarName->GetValue().c_str() );
}

void ptExtractScalarWidget::OnEnterText(wxCommandEvent &event)
{
	UpdateData();
}

