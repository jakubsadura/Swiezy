/*
* Copyright (c) 2009,
* Computational Image and Simulation Technologies in Biomedicine (CISTIB),
* Universitat Pompeu Fabra (UPF), Barcelona, Spain. All rights reserved.
* See license.txt file for details.
*/
// -*- C++ -*- generated by wxGlade 0.6.3 on Tue Dec 23 09:06:03 2008

// For compilers that don't support precompilation, include "wx/wx.h"
#include <wx/wxprec.h>

#ifndef WX_PRECOMP
#include <wx/wx.h>
#endif

#include "wxMemoryUsageIndicator.h"
#include "GreenLed.xpm"
#include "OrangeLed.xpm"
#include "RedLed.xpm"

#include "wxID.h"

#include "blSystemInfo.h"

#include <iomanip>
#include <iostream>
#include <wxUnicode.h>
#include <sstream>

#define wxID_MEMORY_USAGE_TIMER wxID("MEMORY_USAGE_TIMER")

BEGIN_EVENT_TABLE(wxMemoryUsageIndicator, wxPanel)
	EVT_TIMER(wxID_MEMORY_USAGE_TIMER, wxMemoryUsageIndicator::OnTimer)
END_EVENT_TABLE()

// begin wxGlade: ::extracode

// end wxGlade

const int MIN_SIZE_X = 140;
const int MIN_SIZE_Y = 20;

wxMemoryUsageIndicator::wxMemoryUsageIndicator(
	wxWindow* parent, 
	int id, 
	const wxPoint& pos, 
	const wxSize& size, 
	long style,
	const wxString& name /*= wxT("wxMemoryUsageIndicator")*/ ):
    wxPanel(parent, id, pos, size, wxTAB_TRAVERSAL)
{

	m_GreenLed = wxBitmap( greenled_xpm );
	m_RedLed = wxBitmap( redled_xpm );
	m_OrangeLed = wxBitmap( orangeled_xpm );

    // begin wxGlade: wxMemoryUsageIndicator::wxMemoryUsageIndicator
    m_label = new wxStaticText(this, wxID_ANY, wxT("100%"));
    m_bitmap = new wxStaticBitmap(this, wxID_ANY, m_GreenLed );

    set_properties();
    do_layout();
    // end wxGlade

	m_maxMemory = base::SystemInfo::ComputeProcessMaxMemory( );

	m_Timer.SetOwner( GetEventHandler(), wxID_MEMORY_USAGE_TIMER );
	m_Timer.Start( 1000 );

	SetMinSize( wxSize( MIN_SIZE_X, MIN_SIZE_Y ) );
}


void wxMemoryUsageIndicator::set_properties()
{
    // begin wxGlade: wxMemoryUsageIndicator::set_properties
    // end wxGlade
}


void wxMemoryUsageIndicator::do_layout()
{
    // begin wxGlade: wxMemoryUsageIndicator::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxHORIZONTAL);
    sizer_1->Add(m_label, 0, 0, 5);
    sizer_1->Add(m_bitmap, 0, 0, 5);
    SetSizer(sizer_1);
    sizer_1->Fit(this);
    // end wxGlade
}


void wxMemoryUsageIndicator::UpdateMemoryUsage()
{
	size_t processSize = base::SystemInfo::GetProcessMemoryUsage();
	float percentage = ( (float) processSize / (float) m_maxMemory ) * 100.0;
	m_label->SetLabel( _U(GetMemoryDescription( processSize, percentage )) );

	if ( percentage < 50.0 )
	{
		//m_bitmap->SetBitmap( m_GreenLed );
	}
	else if ( percentage < 75.0 )
	{
		//m_bitmap->SetBitmap( m_OrangeLed );
	}
	else 
	{
		//m_bitmap->SetBitmap( m_RedLed );
	}

	// Layout the sizer
	Layout();
	// Refresh the window contents with the bitmap
	Refresh();
	// Sizes the window so that it fits around its subwindows
	GetSizer( )->Fit(this);
}

void wxMemoryUsageIndicator::OnTimer( wxTimerEvent& event )
{
	UpdateMemoryUsage( );
}


std::string wxMemoryUsageIndicator::FormatMemorySize( size_t size )
{
	double val = size;
	std::string descriptor("B");
	if ( val >= 1000.0 )
	{
		val /= 1024.0;
		descriptor = "KB";
	}
	if ( val >= 1000.0 )
	{
		val /= 1024.0;
		descriptor = "MB";
	}
	if ( val >= 1000.0 )
	{
		val /= 1024.0;
		descriptor = "GB";
	}
	std::stringstream str;
	str << std::fixed << std::setprecision(2) << val << " ";
	return str.str();
}

std::string wxMemoryUsageIndicator::FormatPercentage( double val )
{
	std::ostringstream str;
	str << std::fixed << std::setprecision(2) << val << " " << "%";
	return str.str();
}

std::string wxMemoryUsageIndicator::GetMemoryDescription( 
	size_t processSize, float percentage )
{
	std::ostringstream str;
	str << FormatMemorySize(processSize) << " (" << FormatPercentage( percentage ) <<")" ;
	return str.str();
}
